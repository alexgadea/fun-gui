<?xml version="1.0" encoding="UTF-8"?>
<!--

 This file is part of GtkSourceView

 Authors: Duncan Coutts, Anders Carlsson
 Copyright (C) 2004, 2007 Duncan Coutts <duncan@haskell.org>
 Copyright (C) 2004 Anders Carlsson <andersca@gnome.org>

 GtkSourceView is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 GtkSourceView is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

-->
<language id="fun" _name="Fun" version="2.0" _section="Sources">
  <metadata>
    <property name="mimetypes">text/fun</property>
    <property name="globs">*.fun</property>
  </metadata>
  
  <styles>
    <style id="keyword"       _name="Keyword"          map-to="def:keyword"     />        
    <style id="type"          _name="Data Type"        map-to="def:type"        />
    <style id="underlined"    _name="Underlined"       map-to="def:underlined"  />       
    <style id="declaration"   _name="Declaration Type"  />
    <style id="specblock"     _name="Specification"     />
    <style id="funblock"      _name="Function" 	        />
    <style id="valblock"      _name="Val"      	        />
    <style id="derivblock"    _name="Derivation"        />
    <style id="proofblock"    _name="Proof"             />       
    <style id="proofJustify"  _name="Proof Justify"     />
    <style id="proofRelation" _name="Proof Relation"    />    
    <style id="propblock"     _name="Proposition"       />
    <style id="comment"       _name="Comment"           />
    <style id="pragma"        _name="Pragma"            />
  </styles>

  <definitions>
        <context id="keywords" style-ref="def:keyword">
          <keyword>where</keyword>
          <keyword>in</keyword>
          <keyword>for</keyword>
          <keyword>of</keyword>
          <keyword>by</keyword>
          <keyword>basic</keyword>
          <keyword>induction</keyword>
          <keyword>with</keyword>
          <keyword>case</keyword>
          <keyword>cases on</keyword>
          <keyword>-\></keyword>
          <keyword>module</keyword>
          <keyword>import</keyword>
          <keyword>if</keyword>
          <keyword>then</keyword>
          <keyword>else</keyword>
          <keyword>verified from</keyword>
          <keyword>begin proof</keyword>
        </context>

	<context id="type-or-constructor" style-ref="type">
	  <match>[0-9]|succ|(\b[A-Z][0-9a-zA-Z._'#]*)</match>
	</context>
	
        <context id="block-comment" style-ref="comment" class="comment" class-disabled="no-spell-check">
            <start>\{-</start>
            <end>-\}</end>
        </context>

	<context id="pragma" style-ref="pragma">
            <start>\{#</start>
            <end>#\}</end>
        </context>

	
        <context id="line-comment" style-ref="comment" end-at-line-end="true" class="comment" class-disabled="no-spell-check">
            <start>--</start>
        </context>

	
	<context id="case">
	  <start>(case) .* (of)</start>
	  <end>end</end>
	  <include>
	    <context ref="keywords"/>
	    <context ref="type-or-constructor"/>
	    <context sub-pattern="1" where="start" style-ref="def:keyword" />
	    <context sub-pattern="2" where="start" style-ref="def:keyword" />
	    <context sub-pattern="0" where="end" style-ref="def:keyword" />
	  </include>
	</context>
	
        <context id="specblocks" style-ref="specblock">
          <start>let spec</start>
          <end>end</end>
          <include>
	    <context sub-pattern="0" where="start" style-ref="def:keyword" />
	    <context sub-pattern="0" where="end" style-ref="def:keyword" />
            <context ref="type-or-constructor" />
            <context ref="keywords" />
          </include>
        </context>
	
        <context id="funblocks" style-ref="funblock">
          <start>let fun</start>
	  <end>end</end>
          <include>
	    <context sub-pattern="0" where="start" style-ref="def:keyword" />
	    <context sub-pattern="0" where="end" style-ref="def:keyword" />
	    <context ref="case" />
            <context ref="type-or-constructor" />
            <context ref="keywords" />
          </include>
        </context>
        
        <context id="valblocks" style-ref="valblock">
          <start>let val</start>
          <end>end</end>
          <include>
	    <context sub-pattern="0" where="start" style-ref="def:keyword" />
	    <context sub-pattern="0" where="end" style-ref="def:keyword" />
            <context ref="type-or-constructor" />
            <context ref="keywords" />
          </include>
        </context>

            <context id="justification" style-ref="proofJustify">
              <start>^ +(=|â‰¡) +\{</start>
              <end>\}$</end>
              <include>
		<context sub-pattern="1" where="start" style-ref="proofRelation" class-disabled="operator"/>
	      </include>
          </context>

	
        <context id="derivblocks" style-ref="derivblock">
          <start>let derivation</start>
          <end>end</end>
          <include>
	    <context sub-pattern="0" where="start" style-ref="def:keyword" />
	    <context sub-pattern="0" where="end" style-ref="def:keyword" />
            <context ref="type-or-constructor" />
            <context ref="keywords" />
            <context ref="justification" />
          </include>
        </context>	
	        
        <context id="proofblocks" style-ref="proofblock">
          <start>let thm</start>
	  <end>end proof</end>
          <include>
	    <context sub-pattern="0" where="start" style-ref="def:keyword" />
	    <context sub-pattern="0" where="end" style-ref="def:keyword" />	 
            <context ref="type-or-constructor" />
            <context ref="keywords" />
	    <context ref="justification" />
            <context id="hypothesis" style-ref="proofJustify">
              <match>\[[^(\])]*:[^(\[)]*\]</match>
            </context>
          </include>
        </context>
        
        <context id="propblocks" style-ref="propblock">
          <start>let (prop)</start>
          <end>end</end>
          <include>
	    <context sub-pattern="0" where="start" style-ref="def:keyword" />
	    <context sub-pattern="0" where="end" style-ref="def:keyword" />
            <context ref="type-or-constructor" />
            <context ref="keywords" />
          </include>
        </context>
	
	<context id="fun">
	  <include>
	    <context ref="pragma" />
	    <context ref="funblocks" />
	    <context ref="valblocks" />
	    <context ref="derivblocks" />
	    <context ref="proofblocks" />
	    <context ref="propblocks" />
	    <context ref="specblocks" />
	    <context ref="block-comment" />
	    <context ref="line-comment" />
	    <context ref="keywords"/>
	  </include>
	</context>
      </definitions>

</language>
